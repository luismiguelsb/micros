#	-- réxibuquis --
#
#	Makefile do projeto hashbooks
#
#	@param target
#		"all" - compila
#		"clean" - limpa os binários gerados na compilação
#		"redo" - limpa binários e então compila
#		"test" - compila e realiza testes
#
#	Se make não recebe parâmetros, a ação default é all


####################################################################################################
#	Definições:

#	Diretorios do projeto
INC_DIR := include
OBJ_DIR := bin
OUT_DIR := build
SRC_DIR := src
LIB_DIR := lib

DFLAG := 


#	Flags de compilaçao. Debug para uso no GDB
# na hora da verdade tem que botar $(CROSS_COMPILE)gcc
CXX := gcc -std=c99
DEBUG := $(if $(DFLAG),-g -fsanitize=address)
CFLAGS :=\
	-Wall \
	-Wextra \
	-Wpedantic \
	-Wshadow \
	-Wunreachable-code \
	-MMD
OPT := $(if $(DFLAG),-O0,-O3)
LIB := 
INC := -I$(INC_DIR)

#	Flags de compilaçao. Debug para uso no GDB

FLAGS = -O2 -Wall -MMD

# CCAR = $(CROSS_COMPILE)ar
CCAR = ar

LDFLAGS = -L$(LIB_DIR) $(LIB) -lgalileo2
CCARFLAGS = -crvs

####################################################################################################
#	Arquivos:

#	Fonte da main
MAIN := $(wildcard src/*.c)

#	Caminho do arquivo estático final
TARGET := $(OUT_DIR)/libQuanser.a

#	Outros arquivos fonte
SRC := $(filter-out $(MAIN), $(shell find $(SRC_DIR) -name '*.c'))

#	Objetos a serem criados
OBJ := $(patsubst %.c, $(OBJ_DIR)/%.o, $(notdir $(SRC)))

####################################################################################################
#	Regras:

#	Binarios
$(TARGET): $(OBJ)
	$(CCAR) -o $@ $^ $(DEBUG) $(CCARFLAGS)

$(OBJ_DIR)/%.o:
	$(CXX) -c -o $@ $(filter %/$*.c, $(SRC)) $(INC) $(CFLAGS) $(DEBUG) $(OPT) $(LDFLAGS)

####################################################################################################
#	Alvos:

.DEFAULT_GOAL := all

all: $(TARGET)

redo: clean all

clean:
	rm -f $(OBJ_DIR)/*.o $(INC_DIR)/*~ $(TARGET) *~ *.o

#	Debug de variaveis da make
print-%:
	@echo $* = $($*)

.PHONY: all clean redo test
